#pragma once
#include "ItemDependencies.h"

vector<BaseAction*> AvailableActions;

void GenerateDependencyList()
{
	vector<BaseCondition*> conds;
	vector<BaseResult*> result;

	/*[[[cog
resources = {'MINERALS' : ['PROBE'],
	'PROBE' : ['NEXUS'],
	'GATEWAY': ['PYLON', 'PROBE'],
	'ZEALOT': ['GATEWAY'],
	'STALKER': ['GATEWAY','CYBERNETICS'],
	'CYBERNETICS': ['PYLON','GATEWAY','PROBE'],
	'PYLON': ['PROBE'],
	'ASSIMILATOR': ['PROBE'],
	'NEXUS': ['PROBE'],
	'STARGATE': ['PROBE','CYBERNETICS','PYLON'],
	'FLEETBEACON': ['PROBE','PYLON','STARGATE'],
	'CARRIER': ['STARGATE', 'FLEETBEACON'],
	'TWILIGHT': ['PROBE','PYLON','CYBERNETICS'],
	'DARKTEMPLAR': ['GATEWAY','TWILIGHT']
	}
for res,deps in resources.items():
	if len(deps)> 0:
		cog.out("conds.push_back(new BaseCondition(\"Build {0}\", {1}".format(res, len(deps) * 2))
		for dep in deps:
			cog.out(", RESOURCES::{0}, 1".format(dep))
		cog.out("));\n")
	cog.outl("result.push_back(new BaseResult(RESOURCES::%s,1));" % res)
	cog.outl("AvailableActions.push_back(new BaseAction(\"Build {0}\", conds, result));\nresult.clear();\nconds.clear();\n".format(res))
]]]*/
// Generated output goes here
//[[[end]]]



}
