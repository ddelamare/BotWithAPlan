#pragma once
#include "ItemDependencies.h"

vector<BaseAction*> AvailableActions;

void GenerateDependencyList()
{
	vector<BaseCondition*> conds;
	vector<BaseResult*> result;

	/*[[[cog
resources = {
	'PROTOSS_PROBE' : ['PROTOSS_NEXUS'],
	'PROTOSS_GATEWAY': ['PROTOSS_PYLON', 'PROTOSS_PROBE'],
	'PROTOSS_ZEALOT': ['PROTOSS_GATEWAY'],
	'PROTOSS_STALKER': ['PROTOSS_GATEWAY','PROTOSS_CYBERNETICSCORE'],
	'PROTOSS_CYBERNETICSCORE': ['PROTOSS_PYLON','PROTOSS_GATEWAY','PROTOSS_PROBE'],
	'PROTOSS_PYLON': ['PROTOSS_PROBE'],
	'PROTOSS_ASSIMILATOR': ['PROTOSS_PROBE'],
	'PROTOSS_NEXUS': ['PROTOSS_PROBE'],
	'PROTOSS_STARGATE': ['PROTOSS_PROBE','PROTOSS_CYBERNETICSCORE','PROTOSS_PYLON'],
	'PROTOSS_FLEETBEACON': ['PROTOSS_PROBE','PROTOSS_PYLON','PROTOSS_STARGATE'],
	'PROTOSS_CARRIER': ['PROTOSS_STARGATE', 'PROTOSS_FLEETBEACON'],
	'PROTOSS_TWILIGHTCOUNCIL': ['PROTOSS_PROBE','PROTOSS_PYLON','PROTOSS_CYBERNETICSCORE'],
	'PROTOSS_DARKTEMPLAR': ['PROTOSS_GATEWAY','PROTOSS_TWILIGHTCOUNCIL']
	}
for res,deps in resources.items():
	if len(deps)> 0:
		cog.out("conds.push_back(new BaseCondition(\"Build {0}\", {1}".format(res, len(deps) * 2))
		for dep in deps:
			cog.out(", sc2::UNIT_TYPEID::{0}, 1".format(dep))
		cog.out("));\n")
	cog.outl("result.push_back(new BaseResult(sc2::UNIT_TYPEID::%s,1));" % res)
	cog.outl("AvailableActions.push_back(new BaseAction(\"Build {0}\", conds, result));\nresult.clear();\nconds.clear();\n".format(res))
]]]*/
// Generated output goes here
//[[[end]]]



}
